require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe VotesController do


  before(:each) do
      @user = FactoryGirl.create(:user)
      sign_in @user
      @discussion = FactoryGirl.create(:discussion)
  end
  
  let(:question) { FactoryGirl.create(:question) }
  let(:valid_attributes) { FactoryGirl.attributes_for(:vote,
                                argument_id: FactoryGirl.create(:argument,
                                          question: Question.create(topic: "ASDasd",
                                              discussion: @discussion),
                                              discussion: @discussion).id,
                                user_id: FactoryGirl.create(:user).id )}

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # VotesController. Be sure to keep this updated too.
  let(:valid_session) { {} }


  describe "POST create" do
    describe "with valid params" do
      it "creates a new Vote" do
        expect {
          post :create, {:vote => valid_attributes}, valid_session
        }.to change(Vote, :count).by(1)
      end

      it "assigns a newly created vote as @vote" do
        post :create, {:vote => valid_attributes}, valid_session
        assigns(:vote).should be_a(Vote)
        assigns(:vote).should be_persisted
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved vote as @vote" do
        # Trigger the behavior that occurs when invalid params are submitted
        Vote.any_instance.stub(:save).and_return(false)
        post :create, {:vote => { "argument_id" => "invalid value" }}, valid_session
        assigns(:vote).should be_a_new(Vote)
      end
    end
  end

end
