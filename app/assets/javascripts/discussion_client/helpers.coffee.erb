<%
imgs = {}
Dir.chdir("#{Rails.root}/app/assets/images/") do
  imgs = Dir["**/*"].inject({}) {|h,f| h.merge! f => image_path(f)}
end
%>

window.image_path = (name) ->
        <%= imgs.to_json %>[name]

#not compatible with IE < 9
window.set_caret = (el, position) =>
    range = document.createRange()
    sel = window.getSelection()
    is_set = false

    $.each(el.childNodes, (index, node) =>
        if node.nodeName == "#text"
            if position-node.length > 0
                position -= node.length
            else
                range.setStart(el.childNodes[index], position)
                range.collapse(true)
                sel.removeAllRanges()
                sel.addRange(range)
                el.focus()
                is_set = true
                return false
        else
            position -= $(el.childNodes[index]).text().length
    )
    if not is_set and position == 0
        el.focus()
        if (window.getSelection? && document.createRange?)
            range = document.createRange()
            range.selectNodeContents(el)
            range.collapse(false)
            sel = window.getSelection()
            sel.removeAllRanges()
            sel.addRange(range)
        else if (document.body.createTextRange?)
            textRange = document.body.createTextRange()
            textRange.moveToElementText(el)
            textRange.collapse(false)
            textRange.select()

###

window.insertHtmlAtCaret = (html) =>

    if (window.getSelection)
        #IE9 and non-IE
        sel = window.getSelection()
        if (sel.getRangeAt && sel.rangeCount)
            range = sel.getRangeAt(0)
            range.deleteContents()

            #Range.createContextualFragment() would be useful here but is
            #only relatively recently standardized and is not supported in
            #some browsers (IE9, for one)
            el = document.createElement("div")
            el.innerHTML = html
            frag = document.createDocumentFragment()
            while ( (node = el.firstChild) )
                lastNode = frag.appendChild(node)

            firstNode = frag.firstChild
            range.insertNode(frag)

            #Preserve the selection
            if (lastNode)
                range = range.cloneRange()
                range.setStartAfter(lastNode)
                range.collapse(true)
                sel.removeAllRanges()
                sel.addRange(range)

    else if ( (sel = document.selection) && sel.type != "Control")
        # IE < 9
        originalRange = sel.createRange()
        originalRange.collapse(true)
        sel.createRange().pasteHTML(html)

$(document).ready( () ->
    $.fn.extend({
        disableSelection: () ->
            this.each( () ->
                if (typeof this.onselectstart != 'undefined')
                    this.onselectstart = () => return false
                else if (typeof this.style.MozUserSelect != 'undefined')
                    this.style.MozUserSelect = 'none';
                else
                    this.onmousedown = () => return false
                    this.onmousedown = () => return false
            )
    })
)

###

window.insertHtmlAtCaret = (node, containerNode) ->
    isOrContainsNode = (ancestor, descendant) ->
        tmp_node = descendant
        while (tmp_node)
            if (tmp_node == ancestor)
                return true

            tmp_node = tmp_node.parentNode
        return false;

    if (window.getSelection)
        sel = window.getSelection()
        if (sel.getRangeAt && sel.rangeCount)
            range = sel.getRangeAt(0)
            if (isOrContainsNode(containerNode, range.commonAncestorContainer))
                range.deleteContents()
                range.insertNode(node)
            else
                containerNode.appendChild(node)

    else if (document.selection && document.selection.createRange)
        range = document.selection.createRange()
        if (isOrContainsNode(containerNode, range.parentElement()))
            if (node.nodeType == 3)
                node.data
            else
                node.outerHTML
            range.pasteHTML(html)
        else
            containerNode.appendChild(node)
